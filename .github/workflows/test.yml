name: Test Bootstrap Scripts

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-bash:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Test bash scripts syntax
      run: |
        bash -n scripts/universal-bootstrap.sh
        bash -n scripts/bootstrap-bash.sh

    - name: Test platform detection with bash
      run: |
        bash scripts/universal-bootstrap.sh --version

    - name: Run integration tests
      run: |
        chmod +x tests/test-integration.sh
        ./tests/test-integration.sh

  test-posix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Test POSIX scripts syntax
      run: |
        sh -n scripts/universal-bootstrap.sh
        sh -n scripts/bootstrap-posix.sh

    - name: Test platform detection with POSIX shell
      run: |
        sh scripts/universal-bootstrap.sh --version

    - name: Run POSIX-specific tests
      run: |
        chmod +x tests/test-posix.sh
        ./tests/test-posix.sh

  test-powershell:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Test PowerShell script
      run: |
        powershell -ExecutionPolicy Bypass -File scripts/bootstrap.ps1 -PackageSpec "--version"

    - name: Test PowerShell syntax
      run: |
        powershell -Command "Get-Content scripts/bootstrap.ps1 | ForEach-Object { [ScriptBlock]::Create($_) }"

  test-python-suite:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov

    - name: Run pytest test suite
      run: |
        pytest tests/test_mcp_config.py -v --cov=mcp_config --cov-report=term-missing --cov-fail-under=85

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-containers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: alpine:latest
            name: alpine-latest
          - image: debian:bookworm-slim
            name: debian-bookworm-slim
          - image: ubuntu:latest
            name: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Test in ${{ matrix.name }} container
      run: |
        # Try to pull image, fallback to local test if it fails
        if ! docker pull ${{ matrix.image }}; then
          echo "Failed to pull ${{ matrix.image }}, running local test instead"
          echo "Testing universal bootstrap locally"
          chmod +x scripts/universal-bootstrap.sh
          ./scripts/universal-bootstrap.sh --version
          echo "Testing POSIX bootstrap locally"
          sh scripts/bootstrap-posix.sh --version
        else
          echo "Successfully pulled ${{ matrix.image }}, running container test"
          docker run --rm -v $PWD:/workspace -w /workspace ${{ matrix.image }} /bin/sh -c "
            # Install dependencies
            if command -v apk >/dev/null 2>&1; then
              apk add --no-cache curl bash || true
            elif command -v apt >/dev/null 2>&1; then
              apt update && apt install -y curl bash || true
            elif command -v yum >/dev/null 2>&1; then
              yum install -y curl bash || true
            fi

            # Test universal bootstrap
            chmod +x scripts/universal-bootstrap.sh
            ./scripts/universal-bootstrap.sh --version

            # Test POSIX bootstrap
            sh scripts/bootstrap-posix.sh --version
          "
        fi